import logging

from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.constants import ParseMode
from telegram.ext import CallbackContext, ContextTypes, ConversationHandler

from baron.commands.nearby_cmd import init_nearby_handler
from baron.events import find_event_by_id, get_event_members, create_option
from baron.models import EventOptions, UserOption
from baron.users import find_user_by_username, find_user_by_id, create_user_option

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)

logging.getLogger("httpx").setLevel(logging.WARNING)

logger = logging.getLogger(__name__)

START_POLL, NEW_OPTION_ASK_PLACE, NEW_OPTION_END = range(3)


async def poll_cmd(update: Update, context: CallbackContext):
    if not context.args:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ ID —Å–æ–±—ã—Ç–∏—è, –Ω–∞–ø—Ä–∏–º–µ—Ä: /poll 123")
        return

    try:
        event_id = int(context.args[0])
    except ValueError:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç event_id. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
        return
    username = update.effective_user.username
    user_id = update.effective_user.id
    with_bot_chat_id = update.effective_chat.id

    logger.info(f"–í—ã–∑–æ–≤ –∫–æ–º–∞–Ω–¥—ã /poll –æ—Ç {username} —Å ID = {user_id} –≤ —á–∞—Ç–µ {with_bot_chat_id}")

    found_user = find_user_by_username(username)

    if not found_user:
        msg = (
            "–ù–µ–ø–ª–æ—Ö–∞—è –ø–æ–ø—ã—Ç–∫–∞, –Ω–æ —Ç—ã –Ω–µ –º–æ–∂–µ—à—å –≤—ã–∑–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É!\n"
            "–°–Ω–∞—á–∞–ª–∞ –º–Ω–µ –Ω—É–∂–Ω–æ —Ç–µ–±—è –∑–∞–ø–æ–º–Ω–∏—Ç—å - –ø—Ä–æ–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É /start\n"
        )
        await update.message.reply_text(msg, parse_mode=ParseMode.MARKDOWN)
        return

    found_event = find_event_by_id(event_id)

    if not found_event:
        await update.message.reply_text(f"–°–æ–±—ã—Ç–∏–µ —Å ID {event_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    context.user_data['event_id'] = found_event.id
    context.user_data['event_name'] = found_event.name

    event_attendees = get_event_members(event_id)
    if not event_attendees:
        await update.message.reply_text('–ù–µ –Ω–∞—à–ª–∏—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–∏ –∏–≤–µ–Ω—Ç–∞ - –ø–æ–≥–æ–¥–∏—Ç–µ —ç—Ç–æ —Ä–µ–∞–ª—å–Ω–æ?')
        return

    context.user_data['event_attendees'] = event_attendees

    found_event_author = find_user_by_id(found_event.author_id)

    if not found_event_author:
        await update.message.reply_text('–ù–µ –Ω–∞—à–µ–ª—Å—è –∞–≤—Ç–æ—Ä –¥–ª—è –∏–≤–µ–Ω—Ç–∞ - –ø–æ–≥–æ–¥–∏—Ç–µ —ç—Ç–æ —Ä–µ–∞–ª—å–Ω–æ?')
        return

    context.user_data['event_author_id'] = found_event_author.id
    context.user_data['event_author_name'] = found_event_author.username

    event_options = EventOptions.select().where(EventOptions.event_id == found_event.id)

    if not event_options.exists():
        await update.message.reply_text("–î–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
        return

    event_info_msg = (
        f"–°–µ–π—á–∞—Å —è –ø–æ–∫–∞–∂—É —Ç–µ–±–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è —Å–æ–±—ã—Ç–∏—è {event_id} - '{found_event.name}'\n"
        f"üèÜ–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä —Å–æ–±—ã—Ç–∏—è - {found_event_author.username}\n"
        # f"üìç–ú–µ—Å—Ç–æ, –∑–∞ –∫–æ—Ç–æ—Ä–æ–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–æ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ - {event_options.place}\n"
        # f"üïí–í—Ä–µ–º—è, –∑–∞ –∫–æ—Ç–æ—Ä–æ–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–æ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ - {event_options.date}\n"
        f"ü´Ç–£—á–∞—Å—Ç–Ω–∏–∫–∏ - {['@' + event_attendee.username for event_attendee in event_attendees]}\n"
    )

    user_options = UserOption.select().where(UserOption.user_id == user_id,
                                             UserOption.option_id.in_(
                                                 [event_option.id for event_option in event_options]))

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –∏ –º–µ—Ç–∫–∞–º–∏ "–í—ã–±—Ä–∞–Ω–æ" –∏–ª–∏ "–û—Ç–º–µ–Ω–∏—Ç—å"
    reply_keyboard = [
        [
            InlineKeyboardButton("–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç", callback_data="new_option"),
            InlineKeyboardButton("–ê —á—Ç–æ –µ—Å—Ç—å —Ä—è–¥–æ–º?", callback_data="adv_option")
        ]
    ]

    for event_option in event_options:
        user_selection = next(
            (user_option for user_option in user_options if user_option.option_id == event_option.id), None)
        status = "üçª" if user_selection and user_selection.status == "confirmed" else "‚ùå"
        button_text = f"{event_option.place} - {event_option.date} ({status})"
        reply_keyboard.append([InlineKeyboardButton(button_text, callback_data=f"{event_option.id}")])

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–±—ã—Ç–∏–∏ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    reply_markup = InlineKeyboardMarkup(reply_keyboard)
    await update.message.reply_text(
        event_info_msg,
        reply_markup=reply_markup
    )
    logger.info(f'/poll, reply_markup = {reply_markup}')
    logger.info('/poll –∑–∞–∫–æ–Ω—á–µ–Ω')

    return START_POLL


async def ask_for_date_when_new_option(update: Update, context: CallbackContext):
    if not update.callback_query:
        return

    query = update.callback_query

    logger.info(
        "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –≤—ã–±—Ä–∞–ª –æ–ø—Ü–∏—é '–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç' –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è —Å id = %s - '%s'",
        query.from_user.username,
        query.from_user.username,
        query.from_user.username
    )

    await update.effective_chat.send_message(
        "–ó–Ω–∞—á–∏—Ç, —Ç–µ–±–µ —á—Ç–æ-—Ç–æ –Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è? –ù—É —Ö–æ—Ä–æ—à–æ - –ø—Ä–µ–¥–ª–∞–≥–∞–π —Å–≤–æ–µ –≤—Ä–µ–º—è –¥–ª—è –≤—Å—Ç—Ä–µ—á–∏"
    )

    return NEW_OPTION_ASK_PLACE


async def ask_for_place_when_new_option(update: Update, context: CallbackContext):
    new_event_date = update.message.text
    context.user_data['event_date'] = new_event_date

    logger.info(
        "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –ø—Ä–µ–¥–ª–æ–∂–∏–ª –¥—Ä—É–≥—É—é –¥–∞—Ç—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è '%s' - %s",
        update.effective_user.username,
        context.user_data['event_name'],
        new_event_date
    )

    await update.message.reply_text(
        "–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ –∫—É–¥–∞ –∏–¥–µ–º, —Ç–æ–ª—å–∫–æ –±–µ–∑ –±–∞–Ω–∞–ª—å–Ω–æ—Å—Ç–µ–π, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.."
    )

    return NEW_OPTION_END


async def end_handling_new_option(update: Update, context: ContextTypes.DEFAULT_TYPE):
    event_author_id = context.user_data['event_author_id']
    event_author_name = context.user_data['event_author_name']

    event_id = context.user_data['event_id']
    event_name = context.user_data['event_name']
    event_attendees = context.user_data['event_attendees']
    attendees_with_at_symbol = ['@' + event_attendee.username for event_attendee in event_attendees]

    new_event_date = context.user_data['event_date']
    new_event_place = update.message.text

    changer_name = update.effective_user.username

    option_id = create_option(event_id, new_event_date, new_event_place, event_author_id)
    context.user_data['new_option_id'] = option_id

    create_user_option(
        update.effective_user.id,
        option_id
    )

    finish_msg = (
        f"–ü—Ä–∏–Ω—è–ª! –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Å–æ–±—ã—Ç–∏—è —Å ID {event_id} —Å–æ–∑–¥–∞–Ω–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º\n"
        f"üèÜ–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç - {changer_name}\n"
        f"üì¢–°–æ–±—ã—Ç–∏–µ - {event_name}\n"
        f"üìç–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–µ –º–µ—Å—Ç–æ - {new_event_place}\n"
        f"üïí–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è - {new_event_date}\n"
        f"ü´Ç–ü—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ - {attendees_with_at_symbol}\n"
    )

    sent_to_others_message = (
        f"{changer_name} –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –¥—Ä—É–≥–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –¥–ª—è —Å–æ–±—ã—Ç–∏—è —Å ID {event_id}\n"
        f"üìç–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–µ –º–µ—Å—Ç–æ - {new_event_place}\n"
        f"üïí–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è - {new_event_date}\n"
        "–û—Å—Ç–∞–ª—å–Ω–æ–µ –æ—Å—Ç–∞—ë—Ç—Å—è –ø—Ä–µ–∂–Ω–∏–º:\n"
        f"üèÜ–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä —Å–æ–±—ã—Ç–∏—è - {event_author_name}\n"
        f"üì¢–°–æ–±—ã—Ç–∏–µ - {event_name}\n"
        f"ü´Ç–ü—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ - {attendees_with_at_symbol}\n"
        "–ß—Ç–æ —Å–∫–∞–∂–µ—à—å?\n"
    )

    found_attendee_with_bot_chat_ids = [event_attendee.with_bot_chat_id for event_attendee in event_attendees]

    keyboard = [
        [InlineKeyboardButton("–°–æ–≥–ª–∞—Å–µ–Ω", callback_data='new_option_soglasen')],
        [InlineKeyboardButton("–ù–µ —Å–æ–≥–ª–∞—Å–µ–Ω", callback_data='new_option_ne_soglasen')]
    ]

    for attendee_with_bot_chat_id in found_attendee_with_bot_chat_ids:
        await context.bot.send_message(
            chat_id=attendee_with_bot_chat_id,
            text=sent_to_others_message,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    await update.message.reply_text(finish_msg, parse_mode=ParseMode.MARKDOWN)

    return ConversationHandler.END


async def ask_for_date_when_new_option(update: Update, context: CallbackContext):
    event_id = context.user_data['event_id']
    await init_nearby_handler(event_id, update, context)

    return ConversationHandler.END


async def poll_new_option_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    action = query.data
    user_id = query.from_user.id
    username = query.from_user.username
    logger.info(f'–û—Ç–≤–µ—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /poll –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –¥—Ä—É–≥–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ —Å–æ–±—ã—Ç–∏—è = {action}')

    if action == 'new_option_soglasen':
        msg = "–ù—É, —ç—Ç–æ —Å—Ç—ã–¥–Ω–æ –∫–æ–Ω–µ—á–Ω–æ - —Ç–∞–∫ —è–≤–Ω–æ –ø–µ—Ä–µ–æ–±—É–≤–∞—Ç—å—Å—è. –•–æ—Ä–æ—à–æ, —è —ç—Ç–æ –∑–∞–ø–æ–º–Ω—é"
        create_user_option(
            user_id,
            context.user_data['new_option_id']
        )
        await context.bot.send_message(chat_id=user_id, text=msg)
    elif action == 'new_option_ne_soglasen':
        await context.bot.send_message(chat_id=user_id, text="–ü–æ–ª–µ—Ö—á–µ –∂–º–∏ –∫–Ω–æ–ø–∫—É, —è —Ç–µ–±—è –ø–æ–Ω—è–ª")

    await update.effective_message.edit_reply_markup(reply_markup=None)


# async def handle_poll_selection(update: Update, context: CallbackContext):
#     # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ callback_query
#     if not update.callback_query:
#         return
#
#     query = update.callback_query
#     user_id = query.from_user.id
#     selection_text = query.data
#
#     # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç"
#     if selection_text == "new_option":
#         await handle_suggest_option(update, context)
#         variant = update.message.text
#         context.chat_data['is_group'] = update.message.chat.type != 'private'
#         context.chat_data['event_date'] = update.message.text
#
#         logger.info(
#             "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s —Å–æ–∑–¥–∞–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è %s",
#             update.message.from_user.username,
#             context.chat_data['event_date']
#         )
#
#         await update.message.reply_text(
#             "–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ –∫—É–¥–∞ –∏–¥–µ–º, —Ç–æ–ª—å–∫–æ –±–µ–∑ –±–∞–Ω–∞–ª—å–Ω–æ—Å—Ç–µ–π, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.."
#         )
#
#     if selection_text == "adv_option":
#         await handle_adv_option(update, context)
#         return
#
#     try:
#         # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º option_id –∏–∑ callback_data
#         option_id = int(selection_text)
#     except ValueError:
#         await update.effective_chat.send_message("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–Ω–æ–ø–∫–∏.")
#         return
#
#     # –ü–æ–ª—É—á–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç –ø–æ ID
#     option = EventOptions.get_or_none(EventOptions.id == option_id)
#     if not option:
#         await update.effective_chat.send_message(f"–í–∞—Ä–∏–∞–Ω—Ç —Å ID {option_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
#         return
#
#     # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ UserOption –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞
#     user_option = UserOption.get_or_none(UserOption.user_id == user_id, UserOption.option_id == option_id)
#
#     # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–≥–æ
#     if user_option:
#         # –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å —Å "confirmed" –Ω–∞ "canceled" –∏–ª–∏ –Ω–∞–æ–±–æ—Ä–æ—Ç
#         new_status = "canceled" if user_option.status == "confirmed" else "confirmed"
#         action = "–æ—Ç–º–µ–Ω–∏–ª–∏" if new_status == "canceled" else "–ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏"
#
#         # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ update() –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
#         UserOption.update(status=new_status).where(UserOption.user_id == user_id,
#                                                    UserOption.option_id == option_id).execute()
#     else:
#         # –ï—Å–ª–∏ –∑–∞–ø–∏—Å–∏ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º
#         user_option = UserOption.create(user_id=user_id, option_id=option_id, status="confirmed")
#         action = "–ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏"
#         new_status = "confirmed"
#
#     button_text = f"{option.place} - {option.date} ({'‚ùå' if new_status == 'canceled' else 'üçª'})"
#     await query.answer(f"–í—ã {action} –≤—ã–±–æ—Ä: {option.place} - {option.date}")
#
#     # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—Å–µ—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Å–æ–±—ã—Ç–∏—è
#     event_options = EventOptions.select().where(EventOptions.event_id == option.event_id)
#     inline_keyboard = []
#
#     for opt in event_options:
#         # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞
#         status = "üçª" if UserOption.get_or_none(user_id=user_id, option_id=opt.id, status="confirmed") else "‚ùå"
#         button_text = f"{opt.place} - {opt.date} ({status})"
#         inline_keyboard.append([InlineKeyboardButton(text=button_text, callback_data=f"{opt.id}")])
#
#     # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—Å–µ—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Å–æ–±—ã—Ç–∏—è
#     event_options = EventOptions.select().where(EventOptions.event_id == option.event_id)
#     inline_keyboard = []
#
#     for opt in event_options:
#         # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞
#         status = "üçª" if UserOption.get_or_none(user_id=user_id, option_id=opt.id, status="confirmed") else "‚ùå"
#         button_text = f"{opt.place} - {opt.date} ({status})"
#         inline_keyboard.append([InlineKeyboardButton(text=button_text, callback_data=f"{opt.id}")])
#
#     # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—Å–µ—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Å–æ–±—ã—Ç–∏—è
#     event_options = EventOptions.select().where(EventOptions.event_id == option.event_id)
#     inline_keyboard = []
#
#     for opt in event_options:
#         status = "üçª" if UserOption.get_or_none(user_id=user_id, option_id=opt.id, status="confirmed") else "‚ùå"
#         button_text = f"{opt.place} - {opt.date} ({status})"
#         inline_keyboard.append([InlineKeyboardButton(text=button_text, callback_data=f"{opt.id}")])
#
#     # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—Å–µ—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Å–æ–±—ã—Ç–∏—è
#     event_options = EventOptions.select().where(EventOptions.event_id == option.event_id)
#     inline_keyboard = []
#
#     for opt in event_options:
#         status = "üçª" if UserOption.get_or_none(user_id=user_id, option_id=opt.id, status="confirmed") else "‚ùå"
#         button_text = f"{opt.place} - {opt.date} ({status})"
#         inline_keyboard.append([InlineKeyboardButton(text=button_text, callback_data=f"{opt.id}")])
#
#     # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç"
#     inline_keyboard.append([InlineKeyboardButton("–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç", callback_data="new_option")])
#     inline_keyboard.append([InlineKeyboardButton("–ê —á—Ç–æ –µ—Å—Ç—å —Ä—è–¥–æ–º?", callback_data="adv_option")])
#
#     # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ç–∫—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
#     try:
#         await query.edit_message_reply_markup(reply_markup=InlineKeyboardMarkup(inline_keyboard))
#         logging.info("–°–æ–æ–±—â–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ —Å –Ω–æ–≤–æ–π —Ä–∞–∑–º–µ—Ç–∫–æ–π.")
#     except Exception as e:
#         logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
#
#
# async def handle_suggest_option(update: Update, context: CallbackContext):
#     logger.info("other variant")
#     # –í—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á—Ç–æ-—Ç–æ
#     text = "–ó–Ω–∞—á–∏—Ç, —Ç–µ–±–µ —á—Ç–æ-—Ç–æ –Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è? –ù—É —Ö–æ—Ä–æ—à–æ - –ø—Ä–µ–¥–ª–∞–≥–∞–π —Å–≤–æ–µ –≤—Ä–µ–º—è –¥–ª—è –≤—Å—Ç—Ä–µ—á–∏"
#     await update.effective_chat.send_message(text)
#
#
# async def handle_adv_option(update: Update, context: CallbackContext):
#     event_id = context.user_data['event_id']
#     await init_nearby_handler(event_id, update, context)
