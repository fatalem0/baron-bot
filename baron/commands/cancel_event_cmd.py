import logging

from telegram import Update
from telegram.constants import ParseMode
from telegram.error import TelegramError
from telegram.ext import ContextTypes

from baron.events import delete_event_by_id, find_event_by_id
from baron.models import UsersEvents, Users, EventOptions
from baron.users import find_user_by_username, find_user_by_id

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)

logging.getLogger("httpx").setLevel(logging.WARNING)

logger = logging.getLogger(__name__)


async def cancel_event_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ event_id.")
        return

    try:
        event_id = int(context.args[0])
    except ValueError:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç event_id. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
        return

    username = update.effective_user.username
    user_id = update.effective_user.id
    with_bot_chat_id = update.effective_chat.id

    logger.info(f"–í—ã–∑–æ–≤ –∫–æ–º–∞–Ω–¥—ã /cancel_event –æ—Ç {username} —Å ID = {user_id} –≤ —á–∞—Ç–µ {with_bot_chat_id}")

    found_user = find_user_by_username(username)

    if not found_user:
        msg = (
            "–ù–µ–ø–ª–æ—Ö–∞—è –ø–æ–ø—ã—Ç–∫–∞, –Ω–æ —Ç—ã –Ω–µ –º–æ–∂–µ—à—å –≤—ã–∑–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É!\n"
            "–°–Ω–∞—á–∞–ª–∞ –º–Ω–µ –Ω—É–∂–Ω–æ —Ç–µ–±—è –∑–∞–ø–æ–º–Ω–∏—Ç—å - –ø—Ä–æ–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É /start\n"
        )
        await update.message.reply_text(msg, parse_mode=ParseMode.MARKDOWN)
        return

    found_event = find_event_by_id(event_id)

    if found_event:
        logger.info(f'found_event.author_id = {found_event.author_id}')
        logger.info(f'found_user.id = {found_user.id}')
        if str(found_user.id) != str(found_event.author_id):
            await update.message.reply_text("–¢—ã –Ω–µ –∞–≤—Ç–æ—Ä —Å–æ–±—ã—Ç–∏—è! –î–∞–∂–µ –Ω–µ –ø—Ä–æ–±—É–π –µ–≥–æ —É–¥–∞–ª—è—Ç—å")
            return

        attendees = UsersEvents.select(Users).join(Users).where(UsersEvents.event_id == found_event.id)
        event = find_event_by_id(event_id)
        event_options = EventOptions.get_or_none(EventOptions.event_id == event_id)
        event_author_name = find_user_by_id(event.author_id)

        delete_event_by_id(event_id)

        sent_to_others_message = (
            f"‚ùå–°–æ–±—ã—Ç–∏–µ '{found_event.name}' –æ—Ç–º–µ–Ω–µ–Ω–æ\n"
            f"üèÜ–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä —Å–æ–±—ã—Ç–∏—è - {event_author_name}\n"
            f"üìç–ú–µ—Å—Ç–æ - {event_options.place}\n"
            f"üìå–ê–¥—Ä–µ—Å - {event.latitude}, {event.longitude}\n"
            f"üïí–í—Ä–µ–º—è - {event_options.date}\n"
        )

        await update.message.reply_text(sent_to_others_message, parse_mode=ParseMode.MARKDOWN)

        for attendee in attendees.objects():
            try:
                await context.bot.send_message(chat_id=attendee.with_bot_chat_id, text=sent_to_others_message,
                                               parse_mode=ParseMode.MARKDOWN)
            except TelegramError as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {attendee.username}: {e}")
    else:
        await update.message.reply_text('–¢—ã —á—Ç–æ, –≤—ã–ø–∏–ª?. –¢–∞–∫–æ–≥–æ —Å–æ–±—ã—Ç–∏—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
