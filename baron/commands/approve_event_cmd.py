import logging

from telegram import Update
from telegram.constants import ParseMode
from telegram.error import TelegramError
from telegram.ext import ContextTypes

from baron.events import find_event_by_id
from baron.models import UsersEvents, Users
from baron.users import find_user_by_username

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)

logging.getLogger("httpx").setLevel(logging.WARNING)

logger = logging.getLogger(__name__)


async def approve_event_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    username = update.effective_user.username
    found_user = find_user_by_username(username)

    if not found_user:
        await update.message.reply_text("–ù–µ –Ω–∞—à–ª–∏ —Ç–µ–±—è –≤ –ë–î, —Å–æ—Ä—è–Ω(")
        return

    if not context.args:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ event_id.")
        return

    try:
        event_id = int(context.args[0])
    except ValueError:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç event_id. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
        return

    found_event = find_event_by_id(event_id)

    if found_event:
        logger.info(f'found_event.author_id = {found_event.author_id}')
        logger.info(f'found_user.id = {found_user.id}')
        if found_user.id != found_event.author_id:
            await update.message.reply_text("–¢—ã –Ω–µ –∞–≤—Ç–æ—Ä —Å–æ–±—ã—Ç–∏—è! –î–∞–∂–µ –Ω–µ –ø—Ä–æ–±—É–π –µ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—Ç—å")
            return

        attendees = UsersEvents.select(Users).join(Users).where(UsersEvents.event_id == found_event.id)
        attendees_with_at_symbol = ', '.join(['@' + attendee.username for attendee in attendees])

        sent_to_others_message = (
            f"‚úÖ–°–æ–±—ã—Ç–∏–µ '{found_event.name}' —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–æ!\n"
            # f"üìç–ú–µ—Å—Ç–æ - {found_event.}\n"
            # f"üïí–í—Ä–µ–º—è - {event_date}\n"
            f"ü´Ç–£—á–∞—Å—Ç–Ω–∏–∫–∏ - {attendees_with_at_symbol}\n"
        )

        for attendee in attendees.objects():
            try:
                await context.bot.send_message(chat_id=attendee.with_bot_chat_id, text=sent_to_others_message,
                                               parse_mode=ParseMode.MARKDOWN)
            except TelegramError as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {attendee.username}: {e}")
    else:
        await update.message.reply_text('–¢—ã —á—Ç–æ, –≤—ã–ø–∏–ª?. –¢–∞–∫–æ–≥–æ —Å–æ–±—ã—Ç–∏—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
