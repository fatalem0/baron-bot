import logging
from datetime import datetime
from idlelib import query

from peewee import Update, Model, CharField, ForeignKeyField, DateTimeField, PostgresqlDatabase, IntegrityError, \
    BigIntegerField, SQL, fn
from requests import options
from telegram import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackContext, CommandHandler, MessageHandler
import DB_connect
from baron.models import db
from configs.models import load_config_global

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)

logging.getLogger("httpx").setLevel(logging.WARNING)

logger = logging.getLogger(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ Peewee
if db.is_closed():
    db.connect()
    db.execute_sql('SET search_path TO petrenko_test')


# –ú–æ–¥–µ–ª–∏ –¥–ª—è —Ç–∞–±–ª–∏—Ü events, event_options –∏ users_poll
class Event(Model):
    id = CharField(primary_key=True)  # ID —Å–æ–±—ã—Ç–∏—è
    name = CharField()
    min_attendees = CharField()
    created_at = DateTimeField()
    status_id = CharField()

    class Meta:
        database = db  # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        db_table = 'events'  # –£–∫–∞–∑—ã–≤–∞–µ–º –∏–º—è —Ç–∞–±–ª–∏—Ü—ã


class EventOption(Model):
    event = ForeignKeyField(Event, backref='options')  # –í–Ω–µ—à–Ω–∏–π –∫–ª—é—á –Ω–∞ —Å–æ–±—ã—Ç–∏–µ
    date = DateTimeField()
    place = CharField()
    place_link = CharField(null=True)
    created_at = DateTimeField()

    class Meta:
        database = db  # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        db_table = 'event_options'  # –£–∫–∞–∑—ã–≤–∞–µ–º –∏–º—è —Ç–∞–±–ª–∏—Ü—ã


class UserOption(Model):
    user_id = BigIntegerField(primary_key=True)  # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, ID Telegram)
    option_id = BigIntegerField()  # ID –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ (—Å—Å—ã–ª–∫–∞ –Ω–∞ event_options)
    status = CharField(default='pending')  # –°—Ç–∞—Ç—É—Å –≤—ã–±–æ—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "confirmed", "declined", "pending")

    class Meta:
        database = db  # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        db_table = 'users_options'  # –ò–º—è —Ç–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        indexes = (
            (('user_id', 'option_id'), True),  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –Ω–∞ –∫–æ–º–±–∏–Ω–∞—Ü–∏—é user_id –∏ option_id
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /poll {id}
async def poll_event(update: Update, context: CallbackContext):
    if not context.args:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ ID —Å–æ–±—ã—Ç–∏—è, –Ω–∞–ø—Ä–∏–º–µ—Ä: /poll 123")
        return

    try:
        event_id = int(context.args[0])  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º event_id –≤ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    except ValueError:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID —Å–æ–±—ã—Ç–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")
        return

    user_id = update.message.from_user.id  # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –ø–æ ID
        event = Event.get_or_none(Event.id == event_id)
        if not event:
            await update.message.reply_text(f"–°–æ–±—ã—Ç–∏–µ —Å ID {event_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è —Å–æ–±—ã—Ç–∏—è
        options = EventOption.select().where(EventOption.event == event)
        if not options.exists():
            await update.message.reply_text("–î–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–±—ã—Ç–∏–∏
        event_info = f"–°–æ–±—ã—Ç–∏–µ: {event.name}\n–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {event.min_attendees}\n–°—Ç–∞—Ç—É—Å: {event.status_id}\n–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {event.created_at}"

        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±–æ—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —ç—Ç–æ –±—É–¥—É—Ç –æ–±—ä–µ–∫—Ç—ã UserOption, –∞ –Ω–µ –ø—Ä–æ—Å—Ç–æ –∏—Ö ID
        user_selections = UserOption.select().where(UserOption.user_id == user_id,
                                                    UserOption.option_id.in_([option.id for option in options]))

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –∏ –º–µ—Ç–∫–∞–º–∏ "–í—ã–±—Ä–∞–Ω–æ" –∏–ª–∏ "–û—Ç–º–µ–Ω–∏—Ç—å"
        reply_keyboard = []
        for option in options:
            user_selection = next(
                (selection for selection in user_selections if selection.option_id == option.id), None)
            status = "üçª" if user_selection and user_selection.status == "confirmed" else "üç∫"
            button_text = f"{option.place} - {option.date.strftime('%Y-%m-%d %H:%M')} ({status})"
            reply_keyboard.append([InlineKeyboardButton(button_text, callback_data=f"{option.id}")])

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç"
        reply_keyboard.append([InlineKeyboardButton("–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç", callback_data="new_option")])

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–±—ã—Ç–∏–∏ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        markup = InlineKeyboardMarkup(reply_keyboard)
        await update.message.reply_text(
            f"{event_info}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç–µ —Å–≤–æ–π:",
            reply_markup=markup
        )

    except Exception as e:
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞.")
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /poll: {e}")


async def handle_poll_selection(update: Update, context: CallbackContext):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ callback_query
    if not update.callback_query:
        return

    query = update.callback_query
    user_id = query.from_user.id
    selection_text = query.data

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç"
    if selection_text == "new_option":
        await handle_suggest_option(query)
        return

    try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º option_id –∏–∑ callback_data
        option_id = int(selection_text)
    except ValueError:
        await query.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–Ω–æ–ø–∫–∏.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç –ø–æ ID
    option = EventOption.get_or_none(EventOption.id == option_id)
    if not option:
        await query.message.reply_text(f"–í–∞—Ä–∏–∞–Ω—Ç —Å ID {option_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ UserOption –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞
    user_option = UserOption.get_or_none(UserOption.user_id == user_id, UserOption.option_id == option_id)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–≥–æ
    if user_option:
        # –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å —Å "confirmed" –Ω–∞ "canceled" –∏–ª–∏ –Ω–∞–æ–±–æ—Ä–æ—Ç
        new_status = "canceled" if user_option.status == "confirmed" else "confirmed"
        action = "–æ—Ç–º–µ–Ω–∏–ª–∏" if new_status == "canceled" else "–ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏"

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ update() –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
        UserOption.update(status=new_status).where(UserOption.user_id == user_id,
                                                   UserOption.option_id == option_id).execute()
    else:
        # –ï—Å–ª–∏ –∑–∞–ø–∏—Å–∏ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º
        user_option = UserOption.create(user_id=user_id, option_id=option_id, status="confirmed")
        action = "–ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏"
        new_status = "confirmed"

    button_text = f"{option.place} - {option.date.strftime('%Y-%m-%d %H:%M')} ({'üç∫' if new_status == 'canceled' else 'üçª'})"
    await query.answer(f"–í—ã {action} –≤—ã–±–æ—Ä: {option.place} - {option.date.strftime('%Y-%m-%d %H:%M')}")

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—Å–µ—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Å–æ–±—ã—Ç–∏—è
    event_options = EventOption.select().where(EventOption.event == option.event)
    inline_keyboard = []

    for opt in event_options:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞
        status = "üçª" if UserOption.get_or_none(user_id=user_id, option_id=opt.id, status="confirmed") else "üç∫"
        button_text = f"{opt.place} - {opt.date.strftime('%Y-%m-%d %H:%M')} ({status})"
        inline_keyboard.append([InlineKeyboardButton(text=button_text, callback_data=f"{opt.id}")])

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—Å–µ—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Å–æ–±—ã—Ç–∏—è
    event_options = EventOption.select().where(EventOption.event == option.event)
    inline_keyboard = []

    for opt in event_options:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞
        status = "üçª" if UserOption.get_or_none(user_id=user_id, option_id=opt.id, status="confirmed") else "üç∫"
        button_text = f"{opt.place} - {opt.date.strftime('%Y-%m-%d %H:%M')} ({status})"
        inline_keyboard.append([InlineKeyboardButton(text=button_text, callback_data=f"{opt.id}")])

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—Å–µ—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Å–æ–±—ã—Ç–∏—è
    event_options = EventOption.select().where(EventOption.event == option.event)
    inline_keyboard = []

    for opt in event_options:
        status = "üçª" if UserOption.get_or_none(user_id=user_id, option_id=opt.id, status="confirmed") else "üç∫"
        button_text = f"{opt.place} - {opt.date.strftime('%Y-%m-%d %H:%M')} ({status})"
        inline_keyboard.append([InlineKeyboardButton(text=button_text, callback_data=f"{opt.id}")])

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—Å–µ—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Å–æ–±—ã—Ç–∏—è
    event_options = EventOption.select().where(EventOption.event == option.event)
    inline_keyboard = []

    for opt in event_options:
        status = "üçª" if UserOption.get_or_none(user_id=user_id, option_id=opt.id, status="confirmed") else "üç∫"
        button_text = f"{opt.place} - {opt.date.strftime('%Y-%m-%d %H:%M')} ({status})"
        inline_keyboard.append([InlineKeyboardButton(text=button_text, callback_data=f"{opt.id}")])

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç"
    inline_keyboard.append([InlineKeyboardButton("–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç", callback_data="new_option")])

    # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ç–∫—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
    try:
        await query.edit_message_reply_markup(reply_markup=InlineKeyboardMarkup(inline_keyboard))
        logging.info("–°–æ–æ–±—â–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ —Å –Ω–æ–≤–æ–π —Ä–∞–∑–º–µ—Ç–∫–æ–π.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")


async def handle_suggest_option(query):
    # –í—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á—Ç–æ-—Ç–æ
    await query.message.reply_text("–ü—Ä–µ–¥–ª–æ–∂–∏—Ç–µ —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç")
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–∞
    logger.info("other variant")
    await query.answer()
    return
# # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
# def get_all_users():
#     db = DB_connect.DB()
#     connection = db.get_conn()
#     cursor = connection.cursor()
#
#     # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
#     cursor.execute(f"SELECT id, username FROM {load_config_global().schema}.users")
#     users = cursor.fetchall()  # –°–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (user_id, tg_tag)
#
#     if cursor:
#         cursor.close()
#     if connection:
#         connection.close()
#     return users
#
#
# # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö PostgreSQL –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Å–æ–±—ã—Ç–∏–∏
# def get_event_details(event_id: int):
#     db = None
#     connection = None
#     cursor = None
#     try:
#         db = DB_connect.DB()
#         connection = db.get_conn()
#         cursor = connection.cursor()
#
#         cursor.execute(
#             f"SELECT event_id, date, place, place_link, created_at, author_id FROM {load_config_global().schema}.event_options "
#             f"WHERE"
#             f" event_id = %s;",
#             (event_id,))
#         result = cursor.fetchone()
#
#         if result:
#             event_id, date, place, place_link, created_at, author_id = result
#             return {
#                 "place": place,
#                 "place_link": place_link,
#                 "date": date
#             }
#         else:
#             return None
#     except Exception as e:
#         logger.error("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: %s", e)
#         return None
#     finally:
#         if cursor:
#             cursor.close()
#         if connection:
#             connection.close()
#
#
# # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
# def save_poll_result(user_id, option_id, match):
#     try:
#         db = DB_connect.DB()
#         connection = db.get_conn()
#         cursor = connection.cursor()
#
#         cursor.execute(f"""
#             INSERT INTO {load_config_global().schema}.users_options (user_id, option_id, match)
#             VALUES (%s, %s, %s)
#         """, (user_id, option_id, match))
#         connection.commit()
#
#     except Exception as e:
#         logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ–ø—Ä–æ—Å–∞: %s", e)
#
#     finally:
#         cursor.close()
#         connection.close()
#
#
# async def handle_poll_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –æ—Ç–≤–µ—Ç–µ –Ω–∞ –æ–ø—Ä–æ—Å
#     poll_answer = update.poll_answer
#     user_id = poll_answer.user.id
#     poll_id = poll_answer.poll_id  # poll_id –æ–ø—Ä–æ—Å–∞
#
#
#
#     selected_option_text = poll_answer.option_ids[0]  # –¢–µ–∫—Å—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π –æ–ø—Ü–∏–∏
#
#     # –û–ø—Ä–µ–¥–µ–ª—è–µ–º match –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –æ–ø—Ü–∏–∏
#     match = selected_option_text == 0  # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–ª "–î–∞", match = True
#
#     # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
#     save_poll_result(user_id, poll_id, match)
#
#
# async def poll_event(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
#     if not context.args:
#         await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ event_id.")
#         return
#
#     try:
#         event_id = int(context.args[0])  # –ü–æ–ª—É—á–∞–µ–º event_id –∏–∑ –∫–æ–º–∞–Ω–¥—ã
#     except ValueError:
#         await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç event_id. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
#         return
#
#     # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å–æ–±—ã—Ç–∏–∏
#     event_details = get_event_details(event_id)
#     if not event_details:
#         await update.message.reply_text("–°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
#         return
#
#     # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ–ø—Ä–æ—Å–∞
#     question = f"–•–æ—Ç–∏—Ç–µ –ª–∏ –≤—ã –ø–æ—Å–µ—Ç–∏—Ç—å '{event_details['place']}'?"
#     options = ["–î–∞", "–ù–µ—Ç"]
#     link_text = f"[–°—Å—ã–ª–∫–∞ –Ω–∞ –º–µ—Å—Ç–æ]({event_details['place_link']})"
#     date = event_details['date']
#     additional_info = f"–ù–∞—á–∞–ª–æ: {date}\n{link_text}"
#
#     # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å
#     users = get_all_users()
#
#     for user_id, tg_tag in users:
#         try:
#             # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–ø—Ä–æ—Å–∞ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∂–¥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
#             poll_message = await context.bot.send_poll(
#                 chat_id=user_id,
#                 question=question,
#                 options=options,
#                 is_anonymous=False,  # –ü—É–±–ª–∏—á–Ω—ã–π –æ–ø—Ä–æ—Å
#                 allows_multiple_answers=False  # –û–¥–∏–Ω–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç
#             )
#
#             # –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
#             await context.bot.send_message(
#                 chat_id=user_id,
#                 text=additional_info,
#                 parse_mode="Markdown"
#             )
#
#         except Exception as e:
#             print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
#
#     await update.message.reply_text("–û–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")
