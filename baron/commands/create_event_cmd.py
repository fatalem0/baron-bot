import logging

from telegram import constants, Update
from telegram.constants import ParseMode
from telegram.ext import ConversationHandler, ContextTypes

from baron.events import create_event
from baron.users import find_user_by_id

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)

logging.getLogger("httpx").setLevel(logging.WARNING)

logger = logging.getLogger(__name__)

DATE, PLACE, ATTENDEES, MIN_ATTENDEES, FINISH_CREATE_EVENT = range(5)


async def create_event_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ó–∞—Ö–æ—Ç–µ–ª–∏ —Å–æ–±—Ä–∞—Ç—å—Å—è? –ê —á—Ç–æ –∑–∞ –ø–æ–≤–æ–¥-—Ç–æ?")

    context.chat_data['is_group'] = update.message.chat.type != 'private'

    return DATE


async def set_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.chat_data['event_name'] = update.message.text

    logger.info(
        "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s —Å–æ–∑–¥–∞–µ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –ø–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏–µ–º '%s'",
        update.message.from_user.username,
        context.chat_data['event_name']
    )

    await update.message.reply_text(
        "–ö–æ–≥–¥–∞-–Ω–∏–±—É–¥—å –≤—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–æ–±–µ—Ä—ë—Ç–µ—Å—å... –ù–µ—Ç, —Å–µ—Ä—å—ë–∑–Ω–æ, –∞ –∫–æ–≥–¥–∞?"
    )

    return PLACE


async def set_place(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.chat_data['event_date'] = update.message.text

    logger.info(
        "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –≤—ã–±—Ä–∞–ª –¥–∞—Ç—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è '%s' - %s",
        update.message.from_user.username,
        context.chat_data['event_name'],
        context.chat_data['event_date']
    )

    await update.message.reply_text(
        "–ì–¥–µ —Å–æ–±–µ—Ä—ë—Ç–µ—Å—å?"
    )

    if context.chat_data['is_group']:
        chat_id = update.message.chat_id
        chat_members = await context.bot.getChatMember(chat_id)
        chat_members_usernames = [member.user.username for member in chat_members]
        context.chat_data['event_attendees'] = chat_members_usernames
        return MIN_ATTENDEES
    else:
        return ATTENDEES


async def opt_set_attendees(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.chat_data['event_place'] = update.message.text

    logger.info(
        "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –≤—ã–±—Ä–∞–ª –º–µ—Å—Ç–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è '%s' - %s",
        update.message.from_user.username,
        context.chat_data['event_name'],
        context.chat_data['event_place']
    )

    await update.message.reply_text(
        "–ö–æ–≥–æ –ø–æ–∑–æ–≤—ë—Ç–µ? –ù–∞–ø–∏—à–∏—Ç–µ –∏–º–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ @user, –∫–∞–∂–¥–æ–µ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏"
    )

    return MIN_ATTENDEES


async def set_min_attendees(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.chat_data.get('event_attendees', False):
        context.chat_data['event_attendees'] = update.message.text.strip().split('\n')

    logger.info(
        "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –≤—ã–±—Ä–∞–ª —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è '%s' - %s",
        update.message.from_user.username,
        context.chat_data['event_name'],
        context.chat_data['event_attendees']
    )

    await update.message.reply_text(
        "–ú–∞–≥–∏—á–µ—Å–∫–æ–µ —á–∏—Å–ª–æ –ø–æ–¥ –∫–æ–Ω–µ—Ü - —Å–∫–æ–ª—å–∫–æ –º–∏–Ω–∏–º—É–º —á–µ–ª–æ–≤–µ–∫ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å?"
    )

    return FINISH_CREATE_EVENT


async def finish_create_event(update: Update, context: ContextTypes.DEFAULT_TYPE):
    event_author_name = update.message.from_user.username
    user_id = update.effective_user.id

    event_author_id = find_user_by_id(user_id)
    event_name = context.chat_data['event_name'],
    event_date = context.chat_data['event_date'],
    event_place = context.chat_data['event_place'],
    event_attendees = context.chat_data['event_attendees'],
    event_min_attendees = update.message.text

    new_event_id = create_event(
        event_author_id,
        event_name,
        event_date,
        event_place,
        event_attendees,
        event_min_attendees
    )

    logger.info(
        """
        event_author_id = %s,
        event_author_name = %s,
        event_id = %s,
        event_name = %s,
        event_date = %s,
        event_place = %s,
        event_attendees = %s,
        event_min_attendees = %s
        """,
        event_author_id,
        event_author_name,
        new_event_id,
        event_name,
        event_date,
        event_place,
        event_attendees,
        event_min_attendees
    )

    finish_msg = (
        f"–ì–æ—Ç–æ–≤–æ! ID –≤–∞—à–µ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è - {new_event_id}\n"
        f"üì¢–°–æ–±—ã—Ç–∏–µ - {event_name}\n"
        f"üìç–ú–µ—Å—Ç–æ - {event_place}\n"
        f"üïí–í—Ä–µ–º—è - {event_date}\n"
        f"–£—á–∞—Å—Ç–Ω–∏–∫–∏ - {event_attendees}\n"
        f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫ - {event_min_attendees}\n"
        "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º\n"
    )

    await update.message.reply_text(finish_msg, parse_mode=ParseMode.MARKDOWN)

    return ConversationHandler.END
