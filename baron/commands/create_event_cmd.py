import logging

from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.constants import ParseMode
from telegram.ext import ConversationHandler, ContextTypes

from baron.events import create_event
from baron.users import find_user_by_id, delete_user_from_event, find_user_by_username

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)

logging.getLogger("httpx").setLevel(logging.WARNING)

logger = logging.getLogger(__name__)

DATE, PLACE, LOCATION, ATTENDEES, MIN_ATTENDEES, FINISH_CREATE_EVENT = range(6)


async def create_event_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ó–∞—Ö–æ—Ç–µ–ª–∏ —Å–æ–±—Ä–∞—Ç—å—Å—è? –ê —á—Ç–æ –∑–∞ –ø–æ–≤–æ–¥-—Ç–æ?")

    context.chat_data['is_group'] = update.message.chat.type != 'private'

    return DATE


async def set_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.chat_data['event_name'] = update.message.text

    logger.info(
        "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s —Å–æ–∑–¥–∞–µ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –ø–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏–µ–º '%s'",
        update.message.from_user.username,
        context.chat_data['event_name']
    )

    await update.message.reply_text(
        "–ö–æ–≥–¥–∞-–Ω–∏–±—É–¥—å –≤—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–æ–±–µ—Ä—ë—Ç–µ—Å—å... –ù–µ—Ç, —Å–µ—Ä—å—ë–∑–Ω–æ, –∞ –∫–æ–≥–¥–∞?"
    )

    return PLACE


async def set_place(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.chat_data['event_date'] = update.message.text

    logger.info(
        "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –≤—ã–±—Ä–∞–ª –¥–∞—Ç—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è '%s' - %s",
        update.message.from_user.username,
        context.chat_data['event_name'],
        context.chat_data['event_date']
    )

    await update.message.reply_text(
        "–ò –≥–¥–µ –∂–µ —Ä–µ—à–∏–ª–∏ —Å–æ–±–∏—Ä–∞—Ç—å—Å—è?"
    )

    return LOCATION


async def set_location(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.chat_data['event_place'] = update.message.text

    logger.info(
        "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –≤—ã–±—Ä–∞–ª –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è '%s' - %s",
        update.message.from_user.username,
        context.chat_data['event_name'],
        context.chat_data['event_place']
    )

    await update.message.reply_text(
        "–ö–∞–∫–æ–π-–∫–∞–∫–æ–π –∞–¥—Ä–µ—Å –≥–æ–≤–æ—Ä–∏—à—å?"
    )

    if context.chat_data['is_group']:
        chat_id = update.message.chat_id
        chat_members = await context.bot.getChatMembers(chat_id)
        chat_members_usernames = [member.user.username for member in chat_members]
        context.chat_data['event_attendees'] = chat_members_usernames
        return MIN_ATTENDEES
    else:
        return ATTENDEES


async def opt_set_attendees(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message.location:
        await update.message.reply_text(
            "–ú–Ω–µ –Ω—É–∂–Ω–∞ –≥–µ–æ-—Ç–æ—á–∫–∞(\n–ö–∞–∫–æ–π-–∫–∞–∫–æ–π –∞–¥—Ä–µ—Å –≥–æ–≤–æ—Ä–∏—à—å?"
        )
        return ATTENDEES

    context.chat_data['event_latitude'] = update.message.location.latitude
    context.chat_data['event_longitude'] = update.message.location.longitude

    logger.info(
        "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –≤—ã–±—Ä–∞–ª –º–µ—Å—Ç–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è '%s' - %s, %s",
        update.message.from_user.username,
        context.chat_data['event_name'],
        context.chat_data['event_latitude'],
        context.chat_data['event_longitude'],
    )

    await update.message.reply_text(
        "–ö–æ–≥–æ –ø–æ–∑–æ–≤—ë—Ç–µ? –ù–∞–ø–∏—à–∏—Ç–µ –∏–º–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–∞–∂–¥–æ–µ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏"
    )

    return MIN_ATTENDEES


async def set_min_attendees(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.chat_data.get('event_attendees', False):
        context.chat_data['event_attendees'] = update.message.text.strip().split()

    logger.info(
        "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –≤—ã–±—Ä–∞–ª —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è '%s' - %s",
        update.message.from_user.username,
        context.chat_data['event_name'],
        context.chat_data['event_attendees']
    )

    await update.message.reply_text(
        "–ú–∞–≥–∏—á–µ—Å–∫–æ–µ —á–∏—Å–ª–æ –ø–æ–¥ –∫–æ–Ω–µ—Ü - —Å–∫–æ–ª—å–∫–æ –º–∏–Ω–∏–º—É–º —á–µ–ª–æ–≤–µ–∫ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å?"
    )

    return FINISH_CREATE_EVENT


async def finish_create_event(update: Update, context: ContextTypes.DEFAULT_TYPE):
    event_author_name = update.message.from_user.username
    user_id = update.effective_user.id

    event_author_id = find_user_by_id(user_id)
    event_name = context.chat_data['event_name']
    event_date = context.chat_data['event_date']
    event_place = context.chat_data['event_place']
    event_attendees = context.chat_data['event_attendees']
    event_latitude = context.chat_data['event_latitude']
    event_longitude = context.chat_data['event_longitude']

    event_min_attendees = update.message.text

    new_event_id, found_attendees = create_event(
        event_author_id,
        event_name,
        event_date,
        event_place,
        event_attendees,
        event_min_attendees,
        event_latitude,
        event_longitude
    )

    found_attendees_with_at_symbol = ', '.join(['@' + found_attendee.username for found_attendee in found_attendees])

    logger.info(
        """
        event_author_id = %s,
        event_author_name = %s,
        event_id = %s,
        event_name = %s,
        event_date = %s,
        event_place = %s,
        event_attendees = %s,
        event_min_attendees = %s
        """,
        event_author_id,
        event_author_name,
        new_event_id,
        event_name,
        event_date,
        event_place,
        event_attendees,
        event_min_attendees
    )

    finish_msg = (
        f"–ì–æ—Ç–æ–≤–æ! ID –≤–∞—à–µ–≥–æ —Å–æ–±—ã—Ç–∏—è - {new_event_id}\n"
        f"üì¢–°–æ–±—ã—Ç–∏–µ - {event_name}\n"
        f"üìç–ú–µ—Å—Ç–æ - {event_place}\n"
        f"üìå–ê–¥—Ä–µ—Å - {event_latitude}, {event_longitude}\n"
        f"üïí–í—Ä–µ–º—è - {event_date}\n"
        f"ü´Ç–ü—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ - {found_attendees_with_at_symbol}\n"
        f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫ - {event_min_attendees}\n"
        "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º\n"
    )

    await update.message.reply_text(finish_msg, parse_mode=ParseMode.MARKDOWN)

    sent_to_others_message = (
        f"–ü—Ä–∏–≤–µ—Ç! {event_author_name} –ø—Ä–∏–≥–ª–∞—à–∞–µ—Ç —Ç–µ–±—è –Ω–∞ –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ\n"
        f"üì¢–°–æ–±—ã—Ç–∏–µ - {event_name}\n"
        f"üìç–ú–µ—Å—Ç–æ - {event_place}\n"
        f"üïí–í—Ä–µ–º—è - {event_date}\n"
        f"ü´Ç–ü—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ - {found_attendees_with_at_symbol}\n"
        "–ß—Ç–æ —Å–∫–∞–∂–µ—à—å?\n"
    )

    found_attendee_usernames = [found_attendee.username for found_attendee in found_attendees]
    not_found_attendee_usernames = list(set(event_attendees) - set(found_attendee_usernames))

    found_attendee_with_bot_chat_ids = [found_attendee.with_bot_chat_id for found_attendee in found_attendees]

    keyboard = [
        [InlineKeyboardButton("–ú–æ–≥—É", callback_data='mogu')],
        [InlineKeyboardButton("–ù–µ –º–æ–≥—É", callback_data='ne_mogu')]
    ]

    for attendee_with_bot_chat_id in found_attendee_with_bot_chat_ids:
        await context.bot.send_message(
            chat_id=attendee_with_bot_chat_id,
            text=sent_to_others_message,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    final_msg = (
        "–í—Å—ë, —Ç–µ–ø–µ—Ä—å –≤—Å–µ –≤ –∫—É—Ä—Å–µ –ø—Ä–æ —Ç—É—Å–æ–≤–∫—É\n"
    )

    if not_found_attendee_usernames:
        final_msg += (
            f"–£ –º–µ–Ω—è –ø–æ–ª—É—á–∏–ª–æ—Å—å –¥–æ—Å—Ç—É—á–∞—Ç—å—Å—è –¥–æ –≤—Å–µ—Ö, –∫—Ä–æ–º–µ —Å–ª–µ–¥—É—é—â–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π: {', '.join('@' + not_found_attendee_username for not_found_attendee_username in not_found_attendee_usernames)}\n"
            "–ö–∞–∂–µ—Ç—Å—è, –æ–Ω–∏ –µ—â—ë –Ω–µ –∑–Ω–∞—é—Ç –ø—Ä–æ –º–µ–Ω—è. –ü–æ–¥–µ–ª–∏—Å—å —Å—Å—ã–ª–∫–æ–π –Ω–∞ –º–µ–Ω—è –∏ –ø—Ä–∏–≥–ª–∞—à–∞–π –∏—Ö –Ω–∞ —Ç—É—Å–æ–≤–∫—É!\n"
        )

    await update.message.reply_text(final_msg, parse_mode=ParseMode.MARKDOWN)

    return ConversationHandler.END


async def create_event_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    action = query.data
    username = query.from_user.username
    logger.info(f'–û—Ç–≤–µ—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} –¥–ª—è –∫–æ–º–∞–Ω–¥—ã create_event = {action}')

    if action == 'mogu':
        await update.effective_message.edit_text("–í—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ —É—á–∞—Å—Ç–∏–µ!")
        # TODO: –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É—á–∞—Å—Ç–∏—è
    elif action == 'ne_mogu':
        await update.effective_message.edit_text("–°–æ—Ä—è–Ω(")

        found_user = find_user_by_username(username)
        if found_user:
            found_user_id = found_user.id
            delete_user_from_event(found_user_id)
        else:
            await update.effective_message.edit_text("–ù–µ –Ω–∞—à–ª–∏ —Ç–µ–±—è –≤ –ë–î, —Å–æ—Ä—è–Ω(")
